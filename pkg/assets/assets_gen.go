// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../../assets/config/app.toml
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configAppToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\x3d\x6f\x1b\x3d\x0c\xde\xf5\x2b\x08\x65\x75\x0e\xe7\x18\x48\xde\xd7\xa8\x8b\xb6\x68\x33\x25\x43\x91\x6e\x86\x07\x5a\xc7\xf8\x08\xeb\x24\x85\xe4\xd9\xb8\x7f\x5f\xe8\x6c\x0f\x45\xbb\xf1\x43\x7a\xbe\xb8\xc5\x52\x22\x07\x34\xce\x69\xe7\x12\x0e\x04\x1b\xf0\x47\x19\x30\x46\xef\x4e\x24\xca\x39\xd5\x51\xdb\x2c\x9b\xd6\x3b\x1c\xad\xcf\xa2\xb0\x81\xad\x7f\xe5\xd0\x23\x45\x78\x61\xf8\x84\x91\x87\xe9\xcb\x81\x23\xdb\xd4\x24\xb2\xcf\x7e\xe7\x3a\xd2\x20\x5c\xec\x8a\x70\x01\x05\x3c\x50\x32\xef\x22\x07\x4a\x3a\xb3\x7d\x2d\x18\x7a\xba\x7f\xa8\xf8\x6e\xab\x24\x27\xda\x39\x0d\x3d\x0d\x58\xd7\xbd\x59\xf1\x0e\xbb\x4e\x6a\xb7\x7c\x78\x6a\xda\xa6\x6d\x96\xde\x95\x2c\x06\x1b\xf8\xaf\x5d\xae\x5c\x20\xb1\x67\x8e\x33\x5e\xad\x9b\x42\x83\x77\x47\x9a\x6e\xc3\x23\x4d\x97\x99\xdb\x76\x68\xb8\x47\xa5\x9d\xbb\x83\x1f\x6c\x3d\x09\xf8\xd7\xe9\xed\xe7\x8b\x5f\x80\x2f\x59\xed\x20\x54\x3b\xc8\x02\xfe\xed\x23\xb2\xd1\xca\x2f\x60\xca\x23\x04\x4c\x10\x72\x4a\x14\x0c\x2c\xc3\x2f\xfe\xfe\x0d\xce\x6c\x3d\xcc\xff\xa1\x48\xb6\x1c\x72\x74\x36\x95\x99\xf5\xf6\xdb\xf5\x59\xed\x0f\xf9\xeb\xd5\xaa\x7d\xf4\x7f\x25\x3e\x2a\xcd\x36\x25\x67\xf3\xae\xa0\xea\xb9\xab\x7d\xad\x05\x87\x4b\x79\x07\xcf\x55\xda\x55\xaa\x7a\xc8\x29\x4e\x0b\xa0\xab\x97\x8e\x15\xf7\x91\xaa\x1b\xa1\x8f\x91\x85\x2e\x56\x4e\x24\xfc\x3e\xdd\xbf\x8f\x95\x48\x35\xbe\xe6\x6e\xe6\xbe\xbd\xbf\xe1\xea\x55\x34\x60\xea\xc0\x1b\x77\x7b\xbf\x80\x51\x09\x70\xaf\x39\x8e\x46\x50\xd0\x7a\x38\xf7\x94\xe6\x50\xd4\x50\x0c\x50\xa1\x9e\x8e\x03\xb9\x79\xbd\x01\xbf\x1e\x68\xc8\x32\xad\x6b\xe8\x42\x1d\xeb\xce\x25\xb2\x73\x96\x63\xdd\x5a\xf8\xd7\x59\xd7\x8f\xab\xa7\xff\xfd\xef\x00\x00\x00\xff\xff\xc8\x4b\xf1\x1a\x97\x02\x00\x00"

func configAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_configAppToml,
		"config/app.toml",
	)
}

func configAppToml() (*asset, error) {
	bytes, err := configAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/app.toml", size: 663, mode: os.FileMode(436), modTime: time.Unix(1554525099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/app.toml": configAppToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": {nil, map[string]*bintree{
		"app.toml": {configAppToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
